{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","recipe","ingredient","header","Recipe","_ref","title","calories","image","ingredients","react_default","a","createElement","className","style","src","alt","map","text","App","_useState","useState","_useState2","Object","slicedToArray","recipes","setRecipes","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","useEffect","getRecipes","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","concat","sent","json","hits","console","log","stop","apply","this","arguments","onSubmit","e","preventDefault","type","value","onChange","target","src_Recipe","key","label","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EACAA,EAAAC,QAAA,CAAkBC,OAAA,uBAAAC,WAAA,2BAAAC,OAAA,+OCkBHC,EAjBA,SAAAC,GAA6C,IAA1CC,EAA0CD,EAA1CC,MAAOC,EAAmCF,EAAnCE,SAAUC,EAAyBH,EAAzBG,MAAOC,EAAkBJ,EAAlBI,YACxC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMb,QACpBS,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAMX,QAASG,GAC9BI,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,uBAAeL,IAEjBG,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMN,MAAOO,IAAKP,EAAOQ,IAAI,KAC7CN,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMZ,YACnBO,EAAYQ,IAAI,SAAAf,GAAU,OACzBQ,EAAAC,EAAAC,cAAA,UAAKV,EAAWgB,WC2DXC,EAhEH,WACV,IADgBC,EAMcC,mBAAS,IANvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAMTK,EANSH,EAAA,GAMAI,EANAJ,EAAA,GAAAK,EAOYN,mBAAS,KAPrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAOTE,EAPSD,EAAA,GAODE,EAPCF,EAAA,GAAAG,EAQUV,mBAAS,WARnBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAQTE,EARSD,EAAA,GAQFE,EAREF,EAAA,GAUhBG,oBAAU,WACRC,KACC,CAACH,IAEJ,IAAMG,EAAU,eAAA/B,EAAAkB,OAAAc,EAAA,EAAAd,CAAAe,EAAA3B,EAAA4B,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAA3B,EAAAgC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACMC,MAAK,mCAAAC,OACSf,EADT,YAAAe,OAdf,WAce,aAAAA,OAbd,qCAYG,cACXP,EADWG,EAAAK,KAAAL,EAAAE,KAAA,EAIEL,EAASS,OAJX,OAIXR,EAJWE,EAAAK,KAKjBvB,EAAWgB,EAAKS,MAChBC,QAAQC,IAAIX,EAAKS,MANA,wBAAAP,EAAAU,SAAAd,MAAH,yBAAAnC,EAAAkD,MAAAC,KAAAC,YAAA,GAmBhB,OACE/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,yBAEAF,EAAAC,EAAAC,cAAA,QAAM8C,SAVQ,SAAAC,GAEhBA,EAAEC,iBACF1B,EAASL,GACTC,EAAU,KAMmBjB,UAAU,eACnCH,EAAAC,EAAAC,cAAA,SACEC,UAAU,aACVgD,KAAK,OACLC,MAAOjC,EACPkC,SAnBa,SAAAJ,GACnB7B,EAAU6B,EAAEK,OAAOF,UAoBfpD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAgBgD,KAAK,UAAvC,WAIFnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZY,EAAQR,IAAI,SAAAhB,GAAM,OACjBS,EAAAC,EAAAC,cAACqD,EAAD,CACEC,IAAKjE,EAAOA,OAAOkE,MACnB7D,MAAOL,EAAOA,OAAOkE,MACrB5D,SAAU6D,KAAKC,MAAMpE,EAAOA,OAAOM,UACnCC,MAAOP,EAAOA,OAAOO,MACrBC,YAAaR,EAAOA,OAAOQ,iBAIjCC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,gCCtDcyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bbd53194.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"ingredient\":\"recipe_ingredient__1gatH\",\"header\":\"recipe_header__I9L8t\"};","import React from \"react\";\nimport style from \"./recipe.module.css\";\nconst Recipe = ({ title, calories, image, ingredients }) => {\n  return (\n    <div className={style.recipe}>\n      <h1 className={style.header}>{title}</h1>\n      <p>\n        <h3>Calories: {calories}</h3>\n      </p>\n      <img className={style.image} src={image} alt=\"\" />\n      <div className={style.ingredient}>\n        {ingredients.map(ingredient => (\n          <li>{ingredient.text}</li>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Recipe from \"./Recipe\";\n//useState is a Hook that lets you add react state to components\n//similar to this.state and we need to pass the initial state in\n// and it will return the current state and the function that returns it\n//useEffect\nconst App = () => {\n  const APP_ID = \"45807243\";\n  const APP_KEY = \"4f4a5c8bb162dd7301106f0779b6b68e\";\n  // const examReq = `https://api.edamam.com/search?q=chicken&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n  //Hits is an array of objects\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\" \");\n  const [query, setQuery] = useState(\"chicken\");\n  //Occurs after each render and update\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n  //can access target from this event\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    //prevent page refresh\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n  return (\n    <div className=\"App\">\n      <h1>Recipe Hunt</h1>\n      {/* Create a form */}\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button className=\"search-button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map(recipe => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={Math.round(recipe.recipe.calories)}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n      <p className=\"footer\">Made with &#9829; by Martin</p>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}